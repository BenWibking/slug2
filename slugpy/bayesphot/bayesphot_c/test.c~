#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "kdtree.h"
#include "kernel_density.h"
#include "kernel_density_util.h"
#include "kernel_density_rep.h"

#define NDAT 662796

#define NDIM 3
#define NPT 1000
#define NDNP 3000
#define LEAFSIZE 16
#define NDIMEVAL 1
#define NNEIGH 8
#define NPTNNEIGH 8000
#define NDIMFIXED 2
#define NFIXED 2
#define NDNF 4
#define NGNF 2000
#define NDIMGRID 1

int main() {

  long i, j;

#if 1
  kernel_density *kd;
  double x[NDNP], xpt[1];
  double h[NDIM];
  unsigned long dims[1];
  unsigned long nout;
  double *xout, *wgts;

  for (i=0; i<NPT; i++)
    for (j=0; j<NDIM; j++) x[NDIM*i+j] = i;
  for (i=0; i<NDIM; i++) h[i] = 2.0;
  xpt[0] = 0.0;
  dims[0] = 0;
  kd = build_kd(x, NDIM, NPT, NULL, LEAFSIZE, h, gaussian, 0);  
  nout = kd_rep(kd, xpt, dims, 1, 1.0e-5, &xout, &wgts);
  printf("point list:\n");
  for (i=0; i<nout; i++) {
    for (j=0; j<NDIM-1; j++) printf("%f ", xout[i*(NDIM-1)+j]);
    printf(", weight = %e\n", wgts[i]);
  }

#endif

#if 0
  double x[4000];
  double h[4];
  double xfixed[2];
  unsigned int dimfixed[2];
  unsigned int dimgrid[2];
  unsigned int ngrid[2];
  double xgridlo[2];
  double xgridhi[2];
  double xgrid[20000];
  double pdf[10000], pdf1[10000];
  kernel_density *kd;

  for (i=0; i<1000; i++)
    for (j=0; j<4; j++) x[4*i+j] = i;
  h[0] = h[1] = h[2] = h[3] = 5.0;
  xfixed[0] = 0;
  xfixed[1] = 0;
  dimgrid[0] = 0;
  dimgrid[1] = 1;
  dimfixed[0] = 2;
  dimfixed[1] = 3;
  xgridlo[0] = xgridlo[1] = 0.0;
  xgridhi[0] = xgridhi[1] = 990.0;
  ngrid[0] = 100;
  ngrid[1] = 100;
  for (i=0; i<100; i++) {
    for (j=0; j<100; j++) {
      xgrid[2*(100*i+j)] = i*10;
      xgrid[2*(100*i+j)+1] = j*10;
    }
  }

  kd = build_kd(x, 4, 1000, NULL, LEAFSIZE, h, gaussian, 0);
  kd_pdf_grid(kd, xfixed, dimfixed, 2, 1,
	      xgrid, dimgrid, 2, 100, 1e-6, 1e-15, pdf1);
  kd_pdf_reggrid(kd, xfixed, dimfixed, 2, 1,
		 xgridlo, xgridhi, ngrid, dimgrid, 2,
		 1e-6, 1e-15, pdf);

#endif

#if 0
  double x[6000];
  double h[6];
  double xfixed[2];
  double xgrid[16384];
  double pdf[8192];
  double xgridlo[2], xgridhi[2];
  unsigned int ngrid[2];
  double pdf1[8192];
  unsigned int dimfixed[2];
  unsigned int dimgrid[2];
  kernel_density *kd;

  for (i=0; i<1000; i++)
    for (j=0; j<6; j++) x[6*i+j] = i;
  for (j=0; j<6; j++) h[j] = 1.0;
  kd = build_kd(x, 6, NPT, NULL, LEAFSIZE, h, gaussian, 0);
  xfixed[0] = 0;
  xfixed[1] = 0;
  dimfixed[0] = 4;
  dimfixed[1] = 5;
  dimgrid[0] = 0;
  dimgrid[1] = 1;
  for (i=0; i<128; i++) {
    for (j=0; j<64; j++) {
      xgrid[2*(64*i+j)] = i;
      xgrid[2*(64*i+j)+1] = 2*j;
    }
  }
  xgridlo[0] = xgridlo[1] = 0.0;
  xgridhi[0] = 127.0;
  xgridhi[1] = 126.0;
  ngrid[0] = 128;
  ngrid[1] = 64;
  kd_pdf_int_grid(kd, xfixed, dimfixed, 2, 1,
		  xgrid, dimgrid, 2, 8192,
		  1e-10, 1e-15, pdf);
  kd_pdf_int_reggrid(kd, xfixed, dimfixed, 2, 1,
		     xgridlo, xgridhi, ngrid,
		     dimgrid, 2, 1e-10, 1e-15, pdf1);
  free_kd(kd);
#endif

#if 0
  double x[NDNP];
  double h[NDIM];
  double xpt[NDIM];
  double xeval[NDIMEVAL];
  unsigned int dimeval[NDIMEVAL];
  kernel_density *kd;

  for (i=0; i<NPT; i++)
    for (j=0; j<NDIM; j++) x[NDIM*i+j] = i;
  for (j=0; j<NDIM; j++) h[j] = 0.1;
  kd = build_kd(x, NDIM, NPT, NULL, LEAFSIZE, h, gaussian);
  for (i=0; i<NPT*10; i++) {
    for (j=0; j<NDIMEVAL; j++) {
      xeval[j] = i*0.001;
      dimeval[j] = j;
    }
    for (j=0; j<NDIM; j++) xpt[j] = i;
    printf("%e %e %e\n", xeval[0], kd_pdf_int(kd, xeval, dimeval, NDIMEVAL, 1.0e-4, 1.0e-15), kd_pdf(kd, x, 1.0e-4, 1.0e-15));
  }
  free_kd(kd);
#endif

#if 0
  int i, j;
  double x[NDAT];
  double logM[21], pdf[21];
  unsigned int npt = NDAT, ndim = 1;
  unsigned int leafsize = 16;
  double bandwidth[1];
  kernel_density *kd;
  FILE *fp;

  fp=fopen("../logM.txt", "r");
  for (i=0; i<npt; i++) fscanf(fp, "%lf\n", x+i);
  fclose(fp);
  bandwidth[0] = 0.1;
  kd=build_kd(x, ndim, npt, NULL, leafsize, bandwidth, gaussian);
  for (i=0; i<21; i++) logM[i] = 3.0+4/20.*i;
  kd_pdf_vec(kd, logM, 21, 1.0e-3, 0, pdf);
  for (i=0; i<21; i++) printf("log M = %f, pdf = %f\n", logM[i], pdf[i]);
#endif
}
